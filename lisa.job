#!/bin/bash
#SBATCH --job-name=janne_script
#SBATCH --tasks-per-node=1
#SBATCH --cpus-per-task=12
#SBATCH --partition=gpu_titanrtx
#SBATCH --ntasks=1
#SBATCH --gres=gpu:4
#SBATCH --time=2-0:00:00
#SBATCH --mem=64G
# moved into jobs/msi dir, nothing should change besides this

module purge
module load 2019
module load Anaconda3
module load CUDA/10.1.243
module load cuDNN/7.6.5.32-CUDA-10.1.243

# export LD_LIBRARY_PATH=/hpc/eb/Debian9/cuDNN/7.6.3-CUDA-10.0.130/lib64:$LD_LIBRARY_PATH

CONDA_PREFIX=$(conda info --base)

source $CONDA_PREFIX/etc/profile.d/conda.sh
# sh setup.sh
conda activate clmr 

pip install librosa

echo "starting to copy to scratch..."
date

mkdir -p "$TMPDIR"/datasets/magnatagatune
#cp -r /home/yonis/histogenomics-msc-2019/yoni-code/MsiPrediction/data/msidata/crc_dx/train "$TMPDIR"

rsync -ah --delete --ignore-existing --progress /home/jannesp/git/clmr/datasets/magnatagatune/processed_annotations "$TMPDIR"/datasets/magnatagatune/
rsync -ah --delete --ignore-existing --progress /home/jannesp/git/clmr/datasets/magnatagatune/processed "$TMPDIR"/datasets/magnatagatune/
echo "done with copying to scratch..."
date

ls "$TMPDIR"/datasets/magnatagatune/
num_workers=$(nproc --all)
echo "Num threads: $num_workers"

DATASET_DIR="$TMPDIR"/datasets
echo "Dataset dir: $DATASET_DIR"

export NUM_GPUS_PER_NODE=4
num_workers=$(($num_workers/$NUM_GPUS_PER_NODE))
num_workers=12

echo "Workers per process: $num_workers"
python main.py --transforms_delay 0.4 --projector_layers 2 --dataset magnatagatune --transforms_noise 0 --perc_train_data 1 --backprop_encoder 0 --id 29 --projection_dim 128 --temperature 0.5 --transforms_polarity 0.8 --transforms_gain 0.4 --supervised 0 --learning_rate 0.0008 --batch_size 456 --audio_length 59049 --epochs 5000 --transforms_pitch 0.6 --logistic_lr 0.0001 --transforms_filters 0.8 --sample_rate 22050 --model_name clmr --data_input_dir $DATASET_DIR --workers $num_workers --dataparallel 1

exit

## DDP


export NUM_NODES=1
export NODE_RANK=0
export WORLD_SIZE=$(($NUM_NODES * $NUM_GPUS_PER_NODE))
export OMP_NUM_THREADS=$num_workers

echo "Workers per process: $num_workers"

python -m torch.distributed.launch \
	--nproc_per_node=$NUM_GPUS_PER_NODE \
	--nnodes=$NUM_NODES \
	--node_rank $NODE_RANK \
	main.py --transforms_delay 0.4 --projector_layers 2 --dataset magnatagatune --transforms_noise 0 --perc_train_data 1 --backprop_encoder 0 --id 29 --projection_dim 128 --temperature 0.5 --transforms_polarity 0.8 --transforms_gain 0.4 --supervised 0 --learning_rate 0.0003 --batch_size 48 --audio_length 59049 --epochs 3000 --transforms_pitch 0.6 --logistic_lr 0.0001 --transforms_filters 0.8 --sample_rate 22050 --model_name clmr \
	--data_input_dir $DATASET_DIR \
	--workers $num_workers


exit

exit
